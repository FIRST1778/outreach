plugins {
  id("edu.wpi.first.GradleRIO") version "2019.4.1"
  id("org.jetbrains.kotlin.jvm") version "1.3.50"

  id("idea")

  id("org.jetbrains.dokka") version "0.10.0"
  id("com.diffplug.gradle.spotless") version "3.25.0"
  id("com.github.ben-manes.versions") version "0.27.0"

  id("io.gitlab.arturbosch.detekt") version "1.1.1"
}

def ROBOT_MAIN_CLASS = "org.frc1778.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
  targets {
    roboRIO("roborio") {
      // Team number is loaded either from the .wpilib/wpilib_preferences.json
      // or from command line. If not found an exception will be thrown.
      // You can use getTeamOrDefault(team) instead of getTeamNumber if you
      // want to store a team number in this file.
      team = frc.getTeamNumber()
    }
  }
  artifacts {
    frcJavaArtifact('frcJava') {
      targets << "roborio"
      // Debug can be overridden by command line, for use with VSCode
      debug = frc.getDebugOrDefault(false)
    }
    // Built in artifact to deploy arbitrary files to the roboRIO.
    fileTreeArtifact('frcStaticFileDeploy') {
      // The directory below is the local directory to deploy
      files = fileTree(dir: 'src/main/deploy')
      // Deploy to RoboRIO target, into /home/lvuser/deploy
      targets << "roborio"
      directory = '/home/lvuser/deploy'
    }
  }
}

// Maven central needed for JUnit
repositories {
  mavenCentral()
  maven { url("https://jitpack.io") }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
  implementation wpi.deps.wpilib()
  implementation wpi.deps.vendor.java()
  implementation("org.jetbrains.kotlin:kotlin-stdlib8")
  implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

  implementation("com.google.guava:guava:28.1-jre")
  implementation("com.google.code.gson:gson:2.8.6")

  nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
  nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

  testImplementation("io.kotlintest:kotlintest-runner-junit5:3.4.2")
}

spotless {
  kotlin { ktlint() }
  java { googleJavaFormat("1.7") }
  //    kotlinGradle { ktlint() }
  groovyGradle {
    greclipse()
    indentWithSpaces(2)
  }
}

detekt {
  config = files("$rootDir/detekt-config.yml")
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
